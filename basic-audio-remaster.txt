# Basic Audio Remastering & File Management Concept

## Overview
This document outlines the implementation of audio file combination, UI management, and on-device remastering for interview recordings.

## Core Features

### 1. Audio File Combination
- Combine multiple audio segments from a single interview into one continuous file
- Maintain chronological order based on recording timestamps
- Handle different audio formats (m4a, wav, etc.)
- Preserve audio quality during concatenation

### 2. Audio Management UI
- **Playback Controls**: Play/pause individual segments or combined audio
- **File Management**: Delete unwanted segments before combination
- **Storage**: All files stored locally on device only (no cloud sync)
- **Preview**: Scrub through audio timeline with visual waveform
- **Metadata**: Show recording duration, file size, timestamp

### 3. On-Device Audio Remastering
Apply the following enhancements to combined audio:
- **Noise Reduction**: Remove background noise, hums, clicks
- **Volume Normalization**: Ensure consistent audio levels
- **Silence Removal**: Trim long pauses automatically
- **EQ Adjustments**: Optimize frequency response for voice clarity

## Technical Implementation

### Audio Combination Engine
```swift
class AudioCombiner {
    func combineAudioFiles(_ urls: [URL]) async -> URL? {
        let composition = AVMutableComposition()
        let audioTrack = composition.addMutableTrack(
            withMediaType: .audio,
            preferredTrackID: kCMPersistentTrackID_Invalid
        )

        var currentTime = CMTime.zero

        for url in urls {
            let asset = AVURLAsset(url: url)
            let duration = asset.duration

            try? audioTrack?.insertTimeRange(
                CMTimeRange(start: .zero, duration: duration),
                of: asset.tracks(withMediaType: .audio)[0],
                at: currentTime
            )

            currentTime = CMTimeAdd(currentTime, duration)
        }

        return await exportComposition(composition)
    }
}
```

### Audio Remaster Implementation
```swift
class AudioRemaster {
    private let audioEngine = AVAudioEngine()

    func enhanceAudio(_ url: URL) async -> URL? {
        let audioFile = try? AVAudioFile(forReading: url)
        let buffer = audioFile?.buffer

        // Setup audio processing chain
        let reverb = AVAudioUnitReverb()
        let eq = AVAudioUnitEQ(numberOfBands: 10)
        let compressor = AVAudioUnitEffect()

        // Configure noise reduction
        setupNoiseReduction()

        // Configure volume normalization
        setupVolumeNormalization()

        // Configure silence removal
        setupSilenceDetection()

        // Configure EQ for voice optimization
        setupVoiceEQ(eq)

        // Process audio through engine
        return await processAudioBuffer(buffer)
    }

    private func setupNoiseReduction() {
        // Use AVAudioUnitEffect with noise gate
        // Analyze frequency spectrum to identify noise floor
        // Apply spectral subtraction algorithm
    }

    private func setupVolumeNormalization() {
        // Analyze RMS levels across entire audio
        // Apply dynamic range compression
        // Peak limiting to prevent clipping
    }

    private func setupSilenceDetection() {
        // Detect segments below threshold (-40dB typical)
        // Remove gaps longer than 2 seconds
        // Preserve natural speech rhythm
    }

    private func setupVoiceEQ(_ eq: AVAudioUnitEQ) {
        // High-pass filter at 80Hz (remove rumble)
        // Boost 1-3kHz (speech clarity)
        // Gentle roll-off above 8kHz
    }
}
```

### UI Components

#### Audio File List View
```swift
struct AudioFileListView: View {
    @State private var audioFiles: [AudioFile] = []

    var body: some View {
        List {
            ForEach(audioFiles) { file in
                AudioFileRow(
                    file: file,
                    onPlay: { playAudio(file) },
                    onDelete: { deleteAudio(file) }
                )
            }
        }
        .toolbar {
            Button("Combine & Remaster") {
                Task {
                    await combineAndRemaster()
                }
            }
        }
    }
}
```

#### Audio Player Controls
```swift
struct AudioPlayerView: View {
    @State private var isPlaying = false
    @State private var currentTime: TimeInterval = 0
    @State private var duration: TimeInterval = 0

    var body: some View {
        VStack {
            WaveformView(audioURL: audioURL)

            HStack {
                Button(isPlaying ? "Pause" : "Play") {
                    togglePlayback()
                }

                Slider(
                    value: $currentTime,
                    in: 0...duration
                ) { _ in
                    seekToTime(currentTime)
                }
            }

            Text("\(formatTime(currentTime)) / \(formatTime(duration))")
        }
    }
}
```

## Storage & Export Strategy

### Local Storage Only
- Use app's Documents directory for persistent storage
- Organize by interview session/date
- Implement file cleanup for old recordings
- No iCloud or external sync

### Export Options
- Export combined+remastered audio as M4A (high quality, small size)
- Optional formats: WAV (uncompressed), MP3 (compatibility)
- Share via standard iOS share sheet
- AirDrop, email, save to Files app

## Processing Pipeline

1. **Record Audio Segments** → Store in local Documents/temp/
2. **User Reviews Segments** → Play, delete unwanted parts
3. **Combine Segments** → Create single continuous file
4. **Apply Remastering** → Enhance audio quality on-device
5. **Export Final Audio** → Save to Documents/processed/
6. **Cleanup** → Remove temporary files

## Performance Considerations

- Process audio in background using Task/async-await
- Show progress indicators for long operations
- Stream processing for large files to avoid memory issues
- Cache processed audio to avoid re-processing

## File Organization
```
Documents/
├── interviews/
│   ├── 2024-01-15-interview/
│   │   ├── segments/
│   │   │   ├── segment-001.m4a
│   │   │   ├── segment-002.m4a
│   │   │   └── segment-003.m4a
│   │   ├── combined.m4a
│   │   └── remastered-final.m4a
│   └── 2024-01-16-interview/
└── temp/
```

This approach ensures complete local control, professional audio quality, and intuitive user experience for interview audio management.